name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan weekly
    - cron: '0 2 * * 1'

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Testing & Quality Assurance
  test:
    name: 🧪 Test & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 🔍 Lint code
      run: npm run lint

    - name: 🧪 Run unit tests
      run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: 🔒 Run security audit
      run: npm audit --audit-level=high

    - name: 📦 Build application
      run: npm run build

    - name: 📊 Bundle analysis
      run: |
        # Simple bundle size check - analyze main bundle file
        echo "Bundle analysis - checking main bundle size..."
        MAIN_BUNDLE=$(find dist/angular-expense-tracker/browser -name "main-*.js" -type f)
        if [ -f "$MAIN_BUNDLE" ]; then
          BUNDLE_SIZE=$(stat -c%s "$MAIN_BUNDLE" 2>/dev/null || stat -f%z "$MAIN_BUNDLE" 2>/dev/null || echo "0")
          echo "Main bundle size: $(($BUNDLE_SIZE / 1024)) KB"
          echo "Bundle size analysis completed"
        else
          echo "Main bundle file not found"
        fi

    - name: 💾 Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          dist/
          coverage/
        key: ${{ runner.os }}-build-${{ github.sha }}

  # 🔒 Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

    - name: 🔒 Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # 🚀 Performance & Accessibility Audit
  lighthouse:
    name: 🚀 Lighthouse Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 📦 Build for production
      run: npm run build

    - name: 🚀 Serve application
      run: |
        npm install -g http-server
        http-server dist/angular-expense-tracker/browser -p 8080 &
        sleep 5

    - name: 🔍 Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 🐳 Docker Build & Push
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🌐 Deploy to Vercel
  deploy:
    name: 🌐 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [test, security, lighthouse]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 📦 Build application
      run: npm run build

    - name: 🌐 Deploy to Vercel
      id: deploy
      uses: vercel/action@v1
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

    - name: 📝 Comment deployment URL
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🚀 **Deployment Preview**: ${{ steps.deploy.outputs.url }}'
          })

  # 📊 Post-deployment checks
  post-deploy:
    name: 📊 Post-deployment Checks
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 🔍 Health check
      run: |
        echo "Performing health checks on deployed application..."
        curl -f ${{ needs.deploy.outputs.url }}/health || exit 1

    - name: 📊 Performance monitoring
      run: |
        echo "Setting up performance monitoring..."
        # Add your monitoring setup here

    - name: 🎉 Deployment success notification
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "Application URL: ${{ needs.deploy.outputs.url }}"